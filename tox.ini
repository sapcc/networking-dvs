[tox]
envlist = py27-{mitaka,queens},pep8
minversion = 1.6
skipsdist = True

[testenv]
usedevelop = True
install_command = pip install {opts} {packages}
setenv = VIRTUAL_ENV={envdir} STATSD_MOCK=1
passenv = TRACE_FAILONLY
deps =
   mitaka: -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/mitaka}
   pep8,queens: -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/queens}
   py27: -r{toxinidir}/requirements.txt
   py27: -r{toxinidir}/test-requirements.txt
   mitaka: -e{env:NEUTRON_SOURCE:git+https://git.openstack.org/openstack/neutron.git@stable/mitaka#egg=neutron}
   queens: -e{env:NEUTRON_SOURCE:git+https://git.openstack.org/openstack/neutron.git@stable/queens#egg=neutron}
   pep8: flake8
whitelist_externals = sh
commands = python setup.py testr --slowest --testr-args='{posargs}'
# there is also secret magic in ostestr which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.

[testenv:scenario]
setenv = OS_TEST_PATH=./networking_dvs/tests/scenario
passenv = {[testenv]passenv} TEMPEST_CONFIG_DIR
# If you are running the tests locally you should set the env variable
# TEMPEST_CONFIG_DIR=/opt/stack/networking-dvs/networking_dvs/tests/tempest/etc/

[testenv:pep8]
commands = flake8

[testenv:venv]
commands = {posargs}

[testenv:cover]
commands = python setup.py testr --coverage --testr-args='{posargs}'

[testenv:docs]
commands = python setup.py build_sphinx

[flake8]
# E123 closing bracket does not match indentation of opening bracket's line
# E125 continuation line does not distinguish itself from next logical line
# H803 skipped on purpose per list discussion.
# H904 Wrap long lines in parentheses instead of a backslash.
ignore = E123,E125,H803,H904
show-source = true
builtins = _
exclude = ./.*,build,dist,doc,*openstack/common*,*lib/python*,*egg,networking_dvs/tests/tempest

[hacking]
import_exceptions = networking_dvs._i18n
local-check-factory = neutron.hacking.checks.factory
