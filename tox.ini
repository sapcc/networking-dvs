[tox]
minversion = 2.1
envlist = py{35,27},functional,pep8,pip-missing-reqs
skipsdist = True

[testenv]
usedevelop = True
# tox is silly... these need to be separated by a newline....
whitelist_externals = bash
                      find
                      rm
                      env
install_command = pip install -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/queens} {opts} {packages}
setenv = VIRTUAL_ENV={envdir}
         LANGUAGE=en_US
         LC_ALL=en_US.utf-8
         OS_STDOUT_CAPTURE=1
         OS_STDERR_CAPTURE=1
         OS_TEST_TIMEOUT=160
deps = -r{toxinidir}/test-requirements.txt
commands = python setup.py testr --slowest --testr-args='{posargs}'
passenv = OS_DEBUG GENERATE_HASHES
# there is also secret magic in subunit-trace which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.

[testenv:py27]
commands =
    {[testenv]commands}
    stestr run '{posargs}'
    env TEST_OSPROFILER=1 stestr run --combine --no-discover 'networking_dvs.tests.unit.test_security_group_utils'
    stestr slowest

[testenv:py35]
commands =
    {[testenv]commands}
    stestr run --blacklist-file=tests-py3.txt '{posargs}'
    env TEST_OSPROFILER=1 stestr run --combine --no-discover 'networking_dvs.tests.unit.test_security_group_utils'

[testenv:py36]
commands =
    {[testenv]commands}
    stestr run --blacklist-file=tests-py3.txt '{posargs}'
    env TEST_OSPROFILER=1 stestr run --combine --no-discover 'networking_dvs.tests.unit.test_security_group_utils'

[testenv:pep8]
basepython = python2.7
deps = {[testenv]deps}
commands =
 flake8

[testenv:fast8]
# This is a subset of the full pep8 check which
# only runs flake8 on the changes made since
# HEAD-1. For a full flake8 run including checking
# docs, just use pep8.
basepython = python2.7
commands =
  bash tools/flake8wrap.sh -HEAD

[testenv:functional]
# TODO(melwitt): This can be removed when functional tests are gating with
# python 3.x
basepython = python2.7
usedevelop = True
setenv = {[testenv]setenv}
commands =
  {[testenv]commands}
# NOTE(cdent): The group_regex describes how stestr will group tests into the
# same process when running concurently. The following ensures that gabbi tests
# coming from the same YAML file are all in the same process. This is important
# because each YAML file represents an ordered sequence of HTTP requests. Note
# that tests which do not match this regex will not be grouped in any
# special way. See the following for more details.
# http://stestr.readthedocs.io/en/latest/MANUAL.html#grouping-tests
# https://gabbi.readthedocs.io/en/latest/#purpose
  stestr --test-path=./nova/tests/functional --group-regex=nova\.tests\.functional\.api\.openstack\.placement\.test_placement_api(?:\.|_)([^_]+) run '{posargs}'
  stestr slowest

# TODO(gcb) Merge this into [testenv:functional] when functional tests are gating
# with python 3.5
[testenv:functional-py35]
basepython = python3.5
usedevelop = True
setenv = {[testenv]setenv}
commands =
    {[testenv]commands}
# NOTE(cdent): The group_regex describes how stestr will group tests into the
# same process when running concurently. The following ensures that gabbi tests
# coming from the same YAML file are all in the same process. This is important
# because each YAML file represents an ordered sequence of HTTP requests. Note
# that tests which do not match this regex will not be grouped in any
# special way. See the following for more details.
# http://stestr.readthedocs.io/en/latest/MANUAL.html#grouping-tests
# https://gabbi.readthedocs.io/en/latest/#purpose
    stestr --test-path=./nova/tests/functional --group-regex=nova\.tests\.functional\.api\.openstack\.placement\.test_placement_api(?:\.|_)([^_]+) run '{posargs}'

[testenv:api-samples]
usedevelop = True
setenv = {[testenv]setenv}
         GENERATE_SAMPLES=True
         PYTHONHASHSEED=0
commands =
  find . -type f -name "*.pyc" -delete
  stestr --test-path=./nova/tests/functional/api_sample_tests run '{posargs}'
  stestr slowest

[testenv:genconfig]
commands = oslo-config-generator --config-file=etc/nova/nova-config-generator.conf

[testenv:genpolicy]
commands = oslopolicy-sample-generator --config-file=etc/nova/nova-policy-generator.conf

[testenv:cover]
# Also do not run test_coverage_ext tests while gathering coverage as those
# tests conflict with coverage.
setenv = {[testenv]setenv}
         PYTHON=coverage run --source nova --parallel-mode
commands =
  coverage erase
  find . -type f -name "*.pyc" -delete
  stestr run '{posargs}'
  coverage combine
  coverage html -d cover
  coverage xml -o cover/coverage.xml
  coverage report

[testenv:debug]
commands =
  find . -type f -name "*.pyc" -delete
  oslo_debug_helper {posargs}

[testenv:venv]
commands = {posargs}

[testenv:docs]
# TODO(melwitt): This can be removed when the docs target can be run
# with python 3.x
basepython = python2.7
commands =
  rm -rf doc/source/api doc/build api-guide/build api-ref/build placement-api-ref/build
  python setup.py build_sphinx
  # Test the redirects
  whereto doc/build/html/.htaccess doc/test/redirect-tests.txt
  # Check that all JSON files don't have \r\n in line.
  bash -c "! find doc/ -type f -name *.json | xargs grep -U -n $'\r'"
  # Check that all included JSON files are valid JSON
  bash -c '! find doc/ -type f -name *.json | xargs -t -n1 python -m json.tool 2>&1 > /dev/null | grep -B1 -v ^python'
  sphinx-build -W -b html api-guide/source api-guide/build/html
  sphinx-build -W -b html api-ref/source api-ref/build/html
  sphinx-build -W -b html placement-api-ref/source placement-api-ref/build/html

[testenv:api-guide]
# This environment is called from CI scripts to test and publish
# the API Guide to developer.openstack.org.
commands =
  sphinx-build -W -b html -d api-guide/build/doctrees api-guide/source api-guide/build/html

[testenv:api-ref]
# This environment is called from CI scripts to test and publish
# the API Ref to developer.openstack.org.
commands =
  rm -rf api-ref/build
  sphinx-build -W -b html -d api-ref/build/doctrees api-ref/source api-ref/build/html

[testenv:placement-api-ref]
# This environment is called from CI scripts to test and publish
# the Placement API Ref to developer.openstack.org.
commands =
  # Check that all placement api routes are in the documentation
  python tools/placement_api_docs.py placement-api-ref/source/
  rm -rf placement-api-ref/build
  sphinx-build -W -b html -d placement-api-ref/build/doctrees placement-api-ref/source placement-api-ref/build/html

[testenv:bandit]
# NOTE(browne): This is required for the integration test job of the bandit
# project. Please do not remove.
commands = bandit -r nova -x tests -n 5 -ll

[testenv:releasenotes]
commands = bash -c tools/releasenotes_tox.sh

[flake8]
# E125 is deliberately excluded. See
# https://github.com/jcrocholl/pep8/issues/126. It's just wrong.
#
# Most of the whitespace related rules (E12* and E131) are excluded
# because while they are often useful guidelines, strict adherence to
# them ends up causing some really odd code formatting and forced
# extra line breaks. Updating code to enforce these will be a hard sell.
#
# H405 is another one that is good as a guideline, but sometimes
# multiline doc strings just don't have a natural summary
# line. Rejecting code for this reason is wrong.
#
# E251 Skipped due to https://github.com/jcrocholl/pep8/issues/301

enable-extensions = H106,H203,H904
ignore = E121,E122,E123,E124,E125,E126,E127,E128,E129,E131,E251,H405
exclude =  .venv,.git,.tox,dist,*lib/python*,*egg,build,tools/xenserver*,releasenotes
# To get a list of functions that are more complex than 25, set max-complexity
# to 25 and run 'tox -epep8'.
# 34 is currently the most complex thing we have
# TODO(jogo): get this number down to 25 or so
max-complexity=35

[hacking]

[testenv:pip-missing-reqs]
# do not install test-requirements as that will pollute the virtualenv for
# determining missing packages
# this also means that pip-missing-reqs must be installed separately, outside
# of the requirements.txt files
deps = pip_check_reqs
commands=pip-missing-reqs -d --ignore-file=nova/tests/* --ignore-file=nova/test.py nova

[testenv:bindep]
# Do not install any requirements. We want this to be fast and work even if
# system dependencies are missing, since it's used to tell you what system
# dependencies are missing! This also means that bindep must be installed
# separately, outside of the requirements files, and develop mode disabled
# explicitly to avoid unnecessarily installing the checked-out repo too (this
# further relies on "tox.skipsdist = True" above).
deps = bindep
commands = bindep test
usedevelop = False
